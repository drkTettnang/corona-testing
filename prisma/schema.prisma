// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  role          Role      @default(user)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

enum Role {
  user
  moderator
  admin
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Slot {
  id            Int       @default(autoincrement()) @id
  date          DateTime
  seats         Int
  code          String    @default("")
  location      Location  @relation(fields: [locationId], references: [id])
  locationId    Int       @map(name: "location_id")
  bookings      Booking[]
  reservations  Reservation[]

  @@map(name: "slots")
}

model Location {
  id             Int      @id @default(autoincrement())
  name           String
  address        String
  description    String
  rollingBooking Boolean  @map(name: "rolling_booking")
  testKitName    String   @default("") @map(name: "test_kit_name")
  slots          Slot[]
  archiv         Archiv[]

  @@map(name: "locations")
}

model Reservation {
  id            Int       @default(autoincrement()) @id
  email         String
  adult         Boolean   @default(true)
  expiresOn     DateTime  @default(now()) @map(name: "expires_on")
  slot          Slot  @relation(fields: [slotId], references: [id])
  slotId        Int @map(name: "slot_id")

  @@map(name: "reservations")
}

enum CWAVariant {
  none
  light
  full
}

model Booking {
  id            Int       @default(autoincrement()) @id
  email         String
  date          DateTime
  firstName     String    @map(name: "first_name")
  lastName      String    @map(name: "last_name")
  street        String
  postcode      String
  city          String
  birthday      DateTime
  phone         String    @default("")
  result        String?   @default("unknown")
  personalA     String?   @map(name: "personal_a")
  personalB     String?   @map(name: "personal_b")
  perosnalC     String?   @map(name: "personal_c")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  evaluatedAt   DateTime?  @map(name: "evaluated_at")
  slot          Slot  @relation(fields: [slotId], references: [id])
  slotId        Int @map(name: "slot_id")
  testKitName   String   @map(name: "test_kit_name") @default("")
  salt          String @default("")
  cwa           CWAVariant @default(none)

  @@map(name: "bookings")
}

model Archiv {
  id          Int        @id @default(autoincrement())
  date        DateTime
  evaluatedAt DateTime?  @map(name: "evaluated_at")
  result      String
  testKitName String     @map(name: "test_kit_name")
  person      String
  age         Int
  cwa         CWAVariant @default(none)
  locationId  Int        @default(0) @map(name: "location_id")
  location    Location   @relation(fields: [locationId], references: [id])

  @@map(name: "archiv")
}
